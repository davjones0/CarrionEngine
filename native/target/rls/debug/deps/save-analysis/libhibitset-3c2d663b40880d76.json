{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52],"program":"/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hibitset","/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"parallel\"","--cfg","feature=\"rayon\"","-C","metadata=3c2d663b40880d76","-C","extra-filename=-3c2d663b40880d76","--out-dir","/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","-L","dependency=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","--extern","atom=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps/libatom-3ce219fded7e8347.rmeta","--extern","rayon=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps/librayon-e86477b0f1a8f47a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,100,106,47,68,111,99,117,109,101,110,116,115,47,71,105,116,72,117,98,47,99,97,114,114,105,111,110,45,101,110,103,105,110,101,47,110,97,116,105,118,101,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,104,105,98,105,116,115,101,116,45,51,99,50,100,54,54,51,98,52,48,56,56,48,100,55,54,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"hibitset","disambiguator":[12491832132985732903,10930551020061625117]},"crate_root":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src","external_crates":[{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1137707474377317163,881293823083572693]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16254816028303588237,6669189139375923666]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7111806954579578569,2199841390691958019]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6021837240640825503,11520007856923678909]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12444724012878050064,2416873571855687959]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6979589238717360547,5382701582921578244]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14383072016947483551,11019396538837452451]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[15664728184530138178,15668582881963515515]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[16547370833325286379,14798728708606514427]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[3405404226459150258,2890948387317429027]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":11,"id":{"name":"atom","disambiguator":[5902996400421776750,10358176729210433066]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":12,"id":{"name":"rayon","disambiguator":[15757594513158321009,16078870032539312532]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":13,"id":{"name":"crossbeam_deque","disambiguator":[12612567490834249259,14883959710314958253]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":14,"id":{"name":"crossbeam_epoch","disambiguator":[7045340443233207153,4406162370562807925]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[17564929995064375520,911619089463124953]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":16,"id":{"name":"arrayvec","disambiguator":[1414280646102669862,7706585457292626772]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":17,"id":{"name":"nodrop","disambiguator":[3367388605684247707,6754400672500474538]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":18,"id":{"name":"crossbeam_utils","disambiguator":[6787746225432285138,6041175494141246349]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":19,"id":{"name":"lazy_static","disambiguator":[348595771024628107,17336960925488172412]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":20,"id":{"name":"memoffset","disambiguator":[14373905981774588287,12694053567674781146]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":21,"id":{"name":"scopeguard","disambiguator":[10917484688737539057,5970577803874369680]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":22,"id":{"name":"either","disambiguator":[8516418951576241157,8827064131123418944]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":23,"id":{"name":"rayon_core","disambiguator":[12461711836468969540,13403518593011397066]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":24,"id":{"name":"crossbeam_queue","disambiguator":[38989387470215925,6656131250639391636]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":25,"id":{"name":"num_cpus","disambiguator":[15703167676019426291,15322478223950942793]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","num":26,"id":{"name":"libc","disambiguator":[8275539938128299520,12225538901635448428]}}],"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":18709,"line_start":1,"line_end":680,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2000,"byte_end":2012,"line_start":59,"line_end":59,"column_start":17,"column_end":29},"alias_span":null,"name":"AtomicBitSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":522},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2029,"byte_end":2036,"line_start":60,"line_end":60,"column_start":16,"column_end":23},"alias_span":null,"name":"BitIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2050,"line_start":60,"line_end":60,"column_start":25,"column_end":37},"alias_span":null,"name":"DrainBitIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2097,"byte_end":2107,"line_start":62,"line_end":62,"column_start":16,"column_end":26},"alias_span":null,"name":"BitParIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":516},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2109,"byte_end":2120,"line_start":62,"line_end":62,"column_start":28,"column_end":39},"alias_span":null,"name":"BitProducer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2137,"byte_end":2146,"line_start":63,"line_end":63,"column_start":15,"column_end":24},"alias_span":null,"name":"BitSetAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2148,"byte_end":2157,"line_start":63,"line_end":63,"column_start":26,"column_end":35},"alias_span":null,"name":"BitSetAnd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":548},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2159,"byte_end":2168,"line_start":63,"line_end":63,"column_start":37,"column_end":46},"alias_span":null,"name":"BitSetNot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2170,"byte_end":2178,"line_start":63,"line_end":63,"column_start":48,"column_end":56},"alias_span":null,"name":"BitSetOr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2180,"byte_end":2189,"line_start":63,"line_end":63,"column_start":58,"column_end":67},"alias_span":null,"name":"BitSetXor","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":18709,"line_start":1,"line_end":680,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":96},{"krate":0,"index":210},{"krate":0,"index":340},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":390},{"krate":0,"index":396},{"krate":0,"index":408},{"krate":0,"index":1046},{"krate":0,"index":1056},{"krate":0,"index":1052},{"krate":0,"index":1048},{"krate":0,"index":410},{"krate":0,"index":434},{"krate":0,"index":454},{"krate":0,"index":460},{"krate":0,"index":472},{"krate":0,"index":484},{"krate":0,"index":488},{"krate":0,"index":500}],"decl_id":null,"docs":" # hibitset","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1817,"byte_end":1839,"line_start":46,"line_end":46,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":19780,"byte_end":19792,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"AtomicBitSet","qualname":"::atomic::AtomicBitSet","value":"AtomicBitSet {  }","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175}],"decl_id":null,"docs":" This is similar to a [`BitSet`] but allows setting of value\n without unique ownership of the structure","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":19955,"byte_end":19958,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicBitSet>::new","value":"fn () -> AtomicBitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `AtomicBitSet`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":20282,"byte_end":20292,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"add_atomic","qualname":"<AtomicBitSet>::add_atomic","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `AtomicBitSet`. Returns `true` if the value was\n already in the set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":20261,"byte_end":20270,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":21051,"byte_end":21054,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"add","qualname":"<AtomicBitSet>::add","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `BitSet`. Returns `true` if the value was\n already in the set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":21030,"byte_end":21039,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":21623,"byte_end":21629,"line_start":83,"line_end":83,"column_start":12,"column_end":18},"name":"remove","qualname":"<AtomicBitSet>::remove","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes `id` from the set, returns `true` if the value\n was removed, and `false` if the value was not set\n to begin with.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":21602,"byte_end":21611,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":22640,"byte_end":22648,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"contains","qualname":"<AtomicBitSet>::contains","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `id` is in the set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":22619,"byte_end":22628,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":22800,"byte_end":22805,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"clear","qualname":"<AtomicBitSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all bits in the set\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34392,"byte_end":34404,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"DrainBitIter","qualname":"::iter::drain::DrainBitIter","value":"DrainBitIter {  }","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" A draining `Iterator` over a [`DrainableBitSet`] structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34705,"byte_end":34708,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<DrainBitIter>::new","value":"fn (set: &'a mut T, masks: [usize; LAYERS], prefix: [u32; LAYERS - 1]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DrainBitIter`. You usually don't call this function\n but just [`.drain()`] on a bit set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":35732,"byte_end":35742,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"BitParIter","qualname":"::iter::parallel::BitParIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `ParallelIterator` over a [`BitSetLike`] structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":36036,"byte_end":36039,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<BitParIter<T>>::new","value":"fn (set: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitParIter`. You usually don't call this function\n but just [`.par_iter()`] on a bit set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":36843,"byte_end":36855,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"layers_split","qualname":"<BitParIter<T>>::layers_split","value":"fn (mut self, layers: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets how many layers are split when forking.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":516},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":37443,"byte_end":37454,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"BitProducer","qualname":"::iter::parallel::BitProducer","value":"","parent":null,"children":[],"decl_id":null,"docs":" Allows splitting and internally iterating through `BitSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":522},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":30776,"byte_end":30783,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"BitIter","qualname":"::iter::BitIter","value":"BitIter {  }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":209}],"decl_id":null,"docs":" An `Iterator` over a [`BitSetLike`] structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31107,"byte_end":31110,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<BitIter<T>>::new","value":"fn (set: T, masks: [usize; LAYERS], prefix: [u32; LAYERS - 1]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitIter`. You usually don't call this function\n but just [`.iter()`] on a bit set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31408,"byte_end":31416,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitIter<T>>::contains","value":"fn (&self, i: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Allows checking if set bit is contained in underlying bit set.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":536},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":46943,"byte_end":46952,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"BitSetAnd","qualname":"::ops::BitSetAnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetAnd` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an intersection of the\n two original sets.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":542},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":48132,"byte_end":48140,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"BitSetOr","qualname":"::ops::BitSetOr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetOr` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an merged of the\n two original sets.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":548},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":49322,"byte_end":49331,"line_start":184,"line_end":184,"column_start":12,"column_end":21},"name":"BitSetNot","qualname":"::ops::BitSetNot","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetNot` takes a [`BitSetLike`] item, and produced an inverted virtual set.\n Note: the implementation is sub-optimal because layers 1-3 are not active.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":554},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":50033,"byte_end":50042,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"BitSetXor","qualname":"::ops::BitSetXor","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetXor` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an merged of the\n two original sets.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":51382,"byte_end":51391,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"BitSetAll","qualname":"::ops::BitSetAll","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetAll` is a bitset with all bits set. Essentially the same as\n `BitSetNot(BitSet::new())` but without any allocation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1046},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2475,"byte_end":2481,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"BitSet","qualname":"::BitSet","value":"BitSet {  }","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605}],"decl_id":null,"docs":" A `BitSet` is a simple set designed to track which indices are placed\n into it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2638,"byte_end":2641,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSet>::new","value":"fn () -> BitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BitSet`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2955,"byte_end":2968,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitSet>::with_capacity","value":"fn (max: Index) -> BitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BitSet`, preallocated for up to `max` indices.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4000,"byte_end":4003,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"add","qualname":"<BitSet>::add","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `BitSet`. Returns `true` if the value was\n already in the set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3979,"byte_end":3988,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5307,"byte_end":5313,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"remove","qualname":"<BitSet>::remove","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes `id` from the set, returns `true` if the value\n was removed, and `false` if the value was not set\n to begin with.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5286,"byte_end":5295,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6233,"byte_end":6241,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitSet>::contains","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `id` is in the set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6212,"byte_end":6221,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6441,"byte_end":6446,"line_start":218,"line_end":218,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Completely wipes out the bit set.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":434},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7140,"byte_end":7150,"line_start":239,"line_end":239,"column_start":11,"column_end":21},"name":"BitSetLike","qualname":"::BitSetLike","value":"BitSetLike","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452}],"decl_id":null,"docs":" A generic interface for [`BitSetLike`]-like types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7277,"byte_end":7291,"line_start":243,"line_end":243,"column_start":8,"column_end":22},"name":"get_from_layer","qualname":"::BitSetLike::get_from_layer","value":"fn (&self, layer: usize, idx: usize) -> usize","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Gets the `usize` corresponding to layer and index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7653,"byte_end":7661,"line_start":254,"line_end":254,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::BitSetLike::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Returns true if this `BitSetLike` contains nothing, and false otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7815,"byte_end":7821,"line_start":260,"line_end":260,"column_start":8,"column_end":14},"name":"layer3","qualname":"::BitSetLike::layer3","value":"fn (&self) -> usize","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Return a `usize` where each bit represents if any word in layer2\n has been set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7956,"byte_end":7962,"line_start":264,"line_end":264,"column_start":8,"column_end":14},"name":"layer2","qualname":"::BitSetLike::layer2","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Return the `usize` from the array of usizes that indicates if any\n bit has been set in layer1\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8107,"byte_end":8113,"line_start":268,"line_end":268,"column_start":8,"column_end":14},"name":"layer1","qualname":"::BitSetLike::layer1","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Return the `usize` from the array of usizes that indicates if any\n bit has been set in layer0\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8249,"byte_end":8255,"line_start":272,"line_end":272,"column_start":8,"column_end":14},"name":"layer0","qualname":"::BitSetLike::layer0","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Return a `usize` that maps to the direct 1:1 association with\n each index of the set\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8355,"byte_end":8363,"line_start":275,"line_end":275,"column_start":8,"column_end":16},"name":"contains","qualname":"::BitSetLike::contains","value":"fn (&self, i: Index) -> bool","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Allows checking if set bit is contained in the bit set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8458,"byte_end":8462,"line_start":278,"line_end":278,"column_start":8,"column_end":12},"name":"iter","qualname":"::BitSetLike::iter","value":"fn (self) -> BitIter<Self>","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Create an iterator that will scan over the keyspace\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8738,"byte_end":8746,"line_start":289,"line_end":289,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::BitSetLike::par_iter","value":"fn (self) -> BitParIter<Self>","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" Create a parallel iterator that will scan over the keyspace\n","sig":null,"attributes":[{"value":"cfg(feature = \"parallel\")","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8702,"byte_end":8730,"line_start":288,"line_end":288,"column_start":5,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":454},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8929,"byte_end":8944,"line_start":298,"line_end":298,"column_start":11,"column_end":26},"name":"DrainableBitSet","qualname":"::DrainableBitSet","value":"DrainableBitSet: BitSetLike","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458}],"decl_id":null,"docs":" A extension to the [`BitSetLike`] trait which allows draining it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9078,"byte_end":9084,"line_start":302,"line_end":302,"column_start":8,"column_end":14},"name":"remove","qualname":"::DrainableBitSet::remove","value":"fn (&mut self, i: Index) -> bool","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Removes bit from the bit set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9221,"byte_end":9226,"line_start":305,"line_end":305,"column_start":8,"column_end":13},"name":"drain","qualname":"::DrainableBitSet::drain","value":"fn <'a> (&'a mut self) -> DrainBitIter<'a, Self>","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Create a draining iterator that will scan over the keyspace and clears it while doing so.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":19888,"byte_end":19900,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":23965,"byte_end":23977,"line_start":153,"line_end":153,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":24677,"byte_end":24689,"line_start":181,"line_end":181,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":24800,"byte_end":24812,"line_start":188,"line_end":188,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":25309,"byte_end":25320,"line_start":209,"line_end":209,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":26859,"byte_end":26870,"line_start":261,"line_end":261,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34480,"byte_end":34492,"line_start":12,"line_end":12,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34905,"byte_end":34917,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":35763,"byte_end":35773,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":37024,"byte_end":37034,"line_start":57,"line_end":57,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":37562,"byte_end":37573,"line_start":77,"line_end":77,"column_start":53,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":30904,"byte_end":30911,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31313,"byte_end":31320,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31491,"byte_end":31498,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":32142,"byte_end":32149,"line_start":66,"line_end":66,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":32652,"byte_end":32659,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":43998,"byte_end":44004,"line_start":9,"line_end":9,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":44503,"byte_end":44509,"line_start":25,"line_end":25,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":45525,"byte_end":45531,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":47049,"byte_end":47058,"line_start":99,"line_end":99,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":47659,"byte_end":47668,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":48237,"byte_end":48245,"line_start":143,"line_end":143,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":48846,"byte_end":48854,"line_start":166,"line_end":166,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":49391,"byte_end":49400,"line_start":186,"line_end":186,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":50139,"byte_end":50148,"line_start":217,"line_end":217,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":51413,"byte_end":51422,"line_start":264,"line_end":264,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":65053,"byte_end":65058,"line_start":38,"line_end":38,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2583,"byte_end":2589,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10618,"byte_end":10624,"line_start":385,"line_end":385,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11161,"byte_end":11167,"line_start":412,"line_end":412,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":19888,"byte_end":19900,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":23965,"byte_end":23977,"line_start":153,"line_end":153,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":504},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":24677,"byte_end":24689,"line_start":181,"line_end":181,"column_start":26,"column_end":38},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":504},"to":{"krate":0,"index":454}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":24800,"byte_end":24812,"line_start":188,"line_end":188,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":504},"to":{"krate":2,"index":2648}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":25309,"byte_end":25320,"line_start":209,"line_end":209,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,97,116,111,109,105,99,46,114,115],"byte_start":26859,"byte_end":26870,"line_start":261,"line_end":261,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":8468}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34480,"byte_end":34492,"line_start":12,"line_end":12,"column_start":30,"column_end":42},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,100,114,97,105,110,46,114,115],"byte_start":34905,"byte_end":34917,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":122},"to":{"krate":2,"index":4340}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":35763,"byte_end":35773,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":37024,"byte_end":37034,"line_start":57,"line_end":57,"column_start":30,"column_end":40},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":510},"to":{"krate":12,"index":3690}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,112,97,114,97,108,108,101,108,46,114,115],"byte_start":37562,"byte_end":37573,"line_start":77,"line_end":77,"column_start":53,"column_end":64},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":516},"to":{"krate":12,"index":1278}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":30904,"byte_end":30911,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31313,"byte_end":31320,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":31491,"byte_end":31498,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":32142,"byte_end":32149,"line_start":66,"line_end":66,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":522},"to":{"krate":2,"index":4340}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":32652,"byte_end":32659,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":43998,"byte_end":44004,"line_start":9,"line_end":9,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1046},"to":{"krate":2,"index":1928}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":44503,"byte_end":44509,"line_start":25,"line_end":25,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1046},"to":{"krate":2,"index":1922}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":45525,"byte_end":45531,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1046},"to":{"krate":2,"index":1934}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":47049,"byte_end":47058,"line_start":99,"line_end":99,"column_start":51,"column_end":60},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":536},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":47659,"byte_end":47668,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":536},"to":{"krate":0,"index":454}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":48237,"byte_end":48245,"line_start":143,"line_end":143,"column_start":51,"column_end":59},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":542},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":48846,"byte_end":48854,"line_start":166,"line_end":166,"column_start":66,"column_end":74},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":542},"to":{"krate":0,"index":454}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":49391,"byte_end":49400,"line_start":186,"line_end":186,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":548},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":50139,"byte_end":50148,"line_start":217,"line_end":217,"column_start":51,"column_end":60},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":554},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,111,112,115,46,114,115],"byte_start":51413,"byte_end":51422,"line_start":264,"line_end":264,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":560},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":64703,"byte_end":64708,"line_start":24,"line_end":24,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1720},"to":{"krate":0,"index":360}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":64711,"byte_end":64715,"line_start":24,"line_end":24,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1724},"to":{"krate":0,"index":360}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":65053,"byte_end":65058,"line_start":38,"line_end":38,"column_start":14,"column_end":19},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":342},"to":{"krate":0,"index":360}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2583,"byte_end":2589,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8946,"byte_end":8956,"line_start":298,"line_end":298,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":434},"to":{"krate":0,"index":454}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10618,"byte_end":10624,"line_start":385,"line_end":385,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1046},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,98,105,116,115,101,116,45,48,46,53,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11161,"byte_end":11167,"line_start":412,"line_end":412,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1046},"to":{"krate":0,"index":454}}]}