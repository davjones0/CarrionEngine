{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49],"program":"/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","pest","/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8939bf1c1b5f5059","-C","extra-filename=-8939bf1c1b5f5059","--out-dir","/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","-L","dependency=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,100,106,47,68,111,99,117,109,101,110,116,115,47,71,105,116,72,117,98,47,99,97,114,114,105,111,110,45,101,110,103,105,110,101,47,110,97,116,105,118,101,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,112,101,115,116,45,56,57,51,57,98,102,49,99,49,98,53,102,53,48,53,57,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"pest","disambiguator":[8751921207327662180,14155456180010527564]},"crate_root":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src","external_crates":[{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1137707474377317163,881293823083572693]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16254816028303588237,6669189139375923666]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7111806954579578569,2199841390691958019]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6021837240640825503,11520007856923678909]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12444724012878050064,2416873571855687959]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6979589238717360547,5382701582921578244]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14383072016947483551,11019396538837452451]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[15664728184530138178,15668582881963515515]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[16547370833325286379,14798728708606514427]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[3405404226459150258,2890948387317429027]}}],"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":283,"byte_end":17558,"line_start":8,"line_end":542,"column_start":1,"column_end":24}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,109,111,100,46,114,115],"byte_start":59621,"byte_end":59626,"line_start":13,"line_end":13,"column_start":22,"column_end":27},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,109,111,100,46,114,115],"byte_start":77667,"byte_end":77678,"line_start":10,"line_end":10,"column_start":29,"column_end":40},"alias_span":null,"name":"StringInput","value":"","parent":{"krate":0,"index":50}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,114,101,108,117,100,101,46,114,115],"byte_start":87272,"byte_end":87277,"line_start":10,"line_end":10,"column_start":17,"column_end":22},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":136}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,114,101,108,117,100,101,46,114,115],"byte_start":87279,"byte_end":87285,"line_start":10,"line_end":10,"column_start":24,"column_end":30},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":136}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,114,101,108,117,100,101,46,114,115],"byte_start":87287,"byte_end":87298,"line_start":10,"line_end":10,"column_start":32,"column_end":43},"alias_span":null,"name":"StringInput","value":"","parent":{"krate":0,"index":136}},{"kind":"Use","ref_id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,114,101,108,117,100,101,46,114,115],"byte_start":87300,"byte_end":87305,"line_start":10,"line_end":10,"column_start":45,"column_end":50},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":136}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17475,"byte_end":17480,"line_start":539,"line_end":539,"column_start":16,"column_end":21},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17498,"byte_end":17509,"line_start":540,"line_end":540,"column_start":17,"column_end":28},"alias_span":null,"name":"StringInput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17527,"byte_end":17533,"line_start":541,"line_end":541,"column_start":17,"column_end":23},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17552,"byte_end":17557,"line_start":542,"line_end":542,"column_start":18,"column_end":23},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":283,"byte_end":17558,"line_start":8,"line_end":542,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":14},{"krate":0,"index":28},{"krate":0,"index":50},{"krate":0,"index":88},{"krate":0,"index":136},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"decl_id":null,"docs":" # pest. Elegant, efficient grammars","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":74879,"byte_end":74884,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Token","qualname":"::parsers::token::Token","value":"Token { rule, start, end }","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43}],"decl_id":null,"docs":" A `struct` representing tokens generated by a parser.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":74868,"byte_end":75077,"line_start":10,"line_end":17,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":74868,"byte_end":75077,"line_start":10,"line_end":17,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":39},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":74948,"byte_end":74952,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"name":"rule","qualname":"::parsers::token::Token::rule","value":"Rule","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" matched [`Rule`](macro.impl_rdp!#rule)\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":41},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":75006,"byte_end":75011,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"start","qualname":"::parsers::token::Token::start","value":"usize","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" starting position in `Input`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":43},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":75063,"byte_end":75066,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"end","qualname":"::parsers::token::Token::end","value":"usize","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" ending position in `Input`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":75678,"byte_end":75681,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Token<Rule>>::new","value":"fn (rule: Rule, start: usize, end: usize) -> Token<Rule>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Token`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76191,"byte_end":76196,"line_start":9,"line_end":9,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input<'a>","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"decl_id":null,"docs":" A `trait` that defines an input for a `Parser`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76248,"byte_end":76251,"line_start":11,"line_end":11,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Returns length of an `Input`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76322,"byte_end":76330,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Returns whether an `Input` is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76403,"byte_end":76406,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"pos","qualname":"::input::Input::pos","value":"fn (&self) -> usize","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Returns current position of an `Input`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76476,"byte_end":76483,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"set_pos","qualname":"::input::Input::set_pos","value":"fn (&mut self, pos: usize) -> ()","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Set current position of an `Input`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76543,"byte_end":76548,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"slice","qualname":"::input::Input::slice","value":"fn (&self, start: usize, end: usize) -> &'a str","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Slices an `Input`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76668,"byte_end":76676,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"line_col","qualname":"::input::Input::line_col","value":"fn (&self, pos: usize) -> (usize, usize)","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Returns the line and column of a position for an `Input`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":76861,"byte_end":76873,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"match_string","qualname":"::input::Input::match_string","value":"fn (&mut self, string: &str) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Matches `string` to an `Input`, returns whether it matched, and advances the position with\n `string.len()` in case it did.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":77073,"byte_end":77090,"line_start":34,"line_end":34,"column_start":8,"column_end":25},"name":"match_insensitive","qualname":"::input::Input::match_insensitive","value":"fn (&mut self, string: &str) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Matches `string` to an `Input` case insensitively, returns whether it matched, and advances\n the position with `string.len()` in case it did.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":77277,"byte_end":77288,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"match_range","qualname":"::input::Input::match_range","value":"fn (&mut self, left: char, right: char) -> bool","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Matches if an `Input`'s current `char` is between `left` and `right`, and advances the\n position with one `char` in case it did.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78365,"byte_end":78376,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"StringInput","qualname":"::inputs::string_input::StringInput","value":"StringInput {  }","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" A `struct` useful for matching in-memory `String`s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78723,"byte_end":78726,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<StringInput>::new","value":"fn (string: &'a str) -> StringInput<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `StringInput` from a `&str`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":84911,"byte_end":84917,"line_start":11,"line_end":11,"column_start":11,"column_end":17},"name":"Parser","qualname":"::parser::Parser","value":"Parser<'a, T: Input<'a>>","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134}],"decl_id":null,"docs":" A `trait` that defines a parser.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":84947,"byte_end":84951,"line_start":12,"line_end":12,"column_start":10,"column_end":14},"name":"Rule","qualname":"::parser::Parser::Rule","value":"type Rule;","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":84962,"byte_end":84967,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Token","qualname":"::parser::Parser::Token","value":"type Token;","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":84977,"byte_end":84982,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"input","qualname":"::parser::Parser::input","value":"fn (&self) -> &T","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85005,"byte_end":85014,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"input_mut","qualname":"::parser::Parser::input_mut","value":"fn (&mut self) -> &mut T","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85101,"byte_end":85104,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"end","qualname":"::parser::Parser::end","value":"fn (&self) -> bool","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns whether a `Parser` has reached its end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85190,"byte_end":85201,"line_start":23,"line_end":23,"column_start":8,"column_end":19},"name":"eoi_matched","qualname":"::parser::Parser::eoi_matched","value":"fn (&self) -> bool","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns whether a `Parser` has matched end-of-input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85252,"byte_end":85257,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"reset","qualname":"::parser::Parser::reset","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Reset a `Parser`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85329,"byte_end":85334,"line_start":29,"line_end":29,"column_start":8,"column_end":13},"name":"queue","qualname":"::parser::Parser::queue","value":"fn (&self) -> &Vec<Self::Token>","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the queue of all matched `Token`s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85431,"byte_end":85440,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"queue_mut","qualname":"::parser::Parser::queue_mut","value":"fn (&mut self) -> &mut Vec<Self::Token>","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the mutable queue of all matched `Token`s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85546,"byte_end":85565,"line_start":35,"line_end":35,"column_start":8,"column_end":27},"name":"queue_with_captures","qualname":"::parser::Parser::queue_with_captures","value":"fn (&self) -> Vec<(Self::Token, String)>","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the queue of all matched `(Token, value)`s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85684,"byte_end":85695,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"queue_index","qualname":"::parser::Parser::queue_index","value":"fn (&self) -> usize","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the current index within the queue. Used in `process!`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85796,"byte_end":85811,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"inc_queue_index","qualname":"::parser::Parser::inc_queue_index","value":"fn (&self) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Increments the current index within the queue. Used in `process!`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85896,"byte_end":85911,"line_start":44,"line_end":44,"column_start":8,"column_end":23},"name":"set_queue_index","qualname":"::parser::Parser::set_queue_index","value":"fn (&self, index: usize) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Set the current index within the queue. Used in `process!`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":85981,"byte_end":85985,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"skip","qualname":"::parser::Parser::skip","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Skips whitespace and comments.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86077,"byte_end":86086,"line_start":50,"line_end":50,"column_start":8,"column_end":17},"name":"is_atomic","qualname":"::parser::Parser::is_atomic","value":"fn (&self) -> bool","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns whether a `Parser` is currently inside an atomic rule.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86196,"byte_end":86206,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"set_atomic","qualname":"::parser::Parser::set_atomic","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Sets a `Parser` to atomic rule mode, barring comment & white-space skipping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86323,"byte_end":86328,"line_start":56,"line_end":56,"column_start":8,"column_end":13},"name":"track","qualname":"::parser::Parser::track","value":"fn (&mut self, failed: Self::Rule, pos: usize) -> ()","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Keeps track of rule failures. It gets called when a `Rule` fails at `pos`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86432,"byte_end":86447,"line_start":59,"line_end":59,"column_start":8,"column_end":23},"name":"tracked_len_pos","qualname":"::parser::Parser::tracked_len_pos","value":"fn (&self) -> (usize, usize)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the length of the tracked `Rule`s.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86661,"byte_end":86669,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"expected","qualname":"::parser::Parser::expected","value":"fn (&mut self) -> (Vec<Self::Rule>, usize)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Retuns a `Vec` of all expected `Rule`s at the deepest position where the parsing last\n stopped. It only returns leafs from the rule tree. Used for error reporting.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86751,"byte_end":86756,"line_start":66,"line_end":66,"column_start":8,"column_end":13},"name":"stack","qualname":"::parser::Parser::stack","value":"fn (&self) -> &Vec<String>","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the stack `Vec`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":86830,"byte_end":86839,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"stack_mut","qualname":"::parser::Parser::stack_mut","value":"fn (&mut self) -> &mut Vec<String>","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the mutable stack `Vec`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,114,101,108,117,100,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/pest-0.4.1/src/prelude.rs","parent":null,"children":[{"krate":0,"index":138}],"decl_id":null,"docs":" A `mod` that contains `pest::Input`, `pest::Parser`, `pest::StringInput`, and `pest::Token`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":75090,"byte_end":75095,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78431,"byte_end":78442,"line_start":31,"line_end":31,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78876,"byte_end":78887,"line_start":51,"line_end":51,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17450,"byte_end":17457,"line_start":537,"line_end":537,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":136}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,112,97,114,115,101,114,115,47,116,111,107,101,110,46,114,115],"byte_start":75090,"byte_end":75095,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78431,"byte_end":78442,"line_start":31,"line_end":31,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,112,101,115,116,45,48,46,52,46,49,47,115,114,99,47,105,110,112,117,116,115,47,115,116,114,105,110,103,95,105,110,112,117,116,46,114,115],"byte_start":78876,"byte_end":78887,"line_start":51,"line_end":51,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":60},"to":{"krate":0,"index":30}}]}