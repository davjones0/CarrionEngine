{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51],"program":"/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rouler","/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=828ad5d3310963b5","-C","extra-filename=-828ad5d3310963b5","--out-dir","/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","-L","dependency=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps","--extern","pest=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps/libpest-8939bf1c1b5f5059.rmeta","--extern","rand=/home/dj/Documents/GitHub/carrion-engine/native/target/rls/debug/deps/librand-f0f31e84263f8d99.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,100,106,47,68,111,99,117,109,101,110,116,115,47,71,105,116,72,117,98,47,99,97,114,114,105,111,110,45,101,110,103,105,110,101,47,110,97,116,105,118,101,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,114,111,117,108,101,114,45,56,50,56,97,100,53,100,51,51,49,48,57,54,51,98,53,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"rouler","disambiguator":[12178999080291893329,3393895354804149107]},"crate_root":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src","external_crates":[{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1137707474377317163,881293823083572693]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16254816028303588237,6669189139375923666]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7111806954579578569,2199841390691958019]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6021837240640825503,11520007856923678909]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12444724012878050064,2416873571855687959]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6979589238717360547,5382701582921578244]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14383072016947483551,11019396538837452451]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":8,"id":{"name":"rustc_demangle","disambiguator":[15664728184530138178,15668582881963515515]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[16547370833325286379,14798728708606514427]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[3405404226459150258,2890948387317429027]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":11,"id":{"name":"pest","disambiguator":[8751921207327662180,14155456180010527564]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":12,"id":{"name":"rand","disambiguator":[5647027504604753855,7390712700277339217]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":13,"id":{"name":"rand","disambiguator":[14130324926010564413,11061664476947407294]}},{"file_name":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","num":14,"id":{"name":"libc","disambiguator":[8275539938128299520,12225538901635448428]}}],"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":304,"byte_end":2896,"line_start":8,"line_end":83,"column_start":1,"column_end":35}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2877,"byte_end":2883,"line_start":83,"line_end":83,"column_start":16,"column_end":22},"alias_span":null,"name":"Roller","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2885,"byte_end":2894,"line_start":83,"line_end":83,"column_start":24,"column_end":33},"alias_span":null,"name":"roll_dice","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":304,"byte_end":2896,"line_start":8,"line_end":83,"column_start":1,"column_end":35},"name":"","qualname":"::","value":"/home/dj/.cargo/registry/src/github.com-1ecc6299db9ec823/rouler-0.1.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":26},{"krate":0,"index":72}],"decl_id":null,"docs":" # rouler - A container-like system for generating dice rolls","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":304,"byte_end":326,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":6523,"byte_end":6532,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"roll_dice","qualname":"::roll::roll_dice","value":"fn (r: &str) -> i64","parent":null,"children":[],"decl_id":null,"docs":" A simple function for throwaway die rolls that do not need saved as a\n `Roller`. Provided for convenience.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":7206,"byte_end":7212,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"Roller","qualname":"::roll::Roller","value":"Roller {  }","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":145}],"decl_id":null,"docs":" The `Roller` is the core struct of the library. The basic principle is to provide a reusable\n container that provides a specific kind of die roll, so that it can be quickly and easily repeated\n whenever called for. Each container contains the syntax of the roll type it represents, and the\n value of the last roll it made. Containers are thus self-mutating, but self-contained.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":7195,"byte_end":7255,"line_start":45,"line_end":48,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":8750,"byte_end":8753,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<Roller>::new","value":"fn (roll: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Roller` with the given die roll syntax, and populates the stored total with a first \n roll of the indicated dice. Because subsequent rerolls mutate the object in order to store the most\n recent roll, it should be declared with `let mut` if you intend to reroll it. \n \n # Panics","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":9471,"byte_end":9477,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"reroll","qualname":"<Roller>::reroll","value":"fn (&mut self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Rolls the `Roller`'s die roll, stores the value in total, and then returns it. In this way, you can use\n `Roller::reroll()` in place as a value, rather than needing to call the method seperately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":9645,"byte_end":9650,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"total","qualname":"<Roller>::total","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of the last roll made by the `Roller`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":10736,"byte_end":10740,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"iter","qualname":"<Roller>::iter","value":"fn (&mut self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to self for use as an `Iterator`. This allows for iterating infinitely and lazily over\n successive rolls of the dice. By borrowing as mutable, the state of the internal total is preserved,\n so that calls to `total()` will remain consistent.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":7266,"byte_end":7272,"line_start":50,"line_end":50,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":10820,"byte_end":10826,"line_start":156,"line_end":156,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":10955,"byte_end":10961,"line_start":164,"line_end":164,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11070,"byte_end":11076,"line_start":170,"line_end":170,"column_start":17,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11102,"byte_end":11108,"line_start":172,"line_end":172,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11233,"byte_end":11239,"line_start":178,"line_end":178,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11375,"byte_end":11381,"line_start":184,"line_end":184,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":7266,"byte_end":7272,"line_start":50,"line_end":50,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":10820,"byte_end":10826,"line_start":156,"line_end":156,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":4340}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":10955,"byte_end":10961,"line_start":164,"line_end":164,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11070,"byte_end":11076,"line_start":170,"line_end":170,"column_start":17,"column_end":23},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2430}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11102,"byte_end":11108,"line_start":172,"line_end":172,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2460}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11233,"byte_end":11239,"line_start":178,"line_end":178,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2480}},{"span":{"file_name":[47,104,111,109,101,47,100,106,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,111,117,108,101,114,45,48,46,49,46,51,47,115,114,99,47,114,111,108,108,46,114,115],"byte_start":11375,"byte_end":11381,"line_start":184,"line_end":184,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":190},"to":{"krate":2,"index":8472}}]}